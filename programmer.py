from __future__ import annotations
import os
from groq import Groq
from dotenv import load_dotenv
from utils import encode_image_to_data_uri

# Load environment variables from the .env file
load_dotenv()

# Initialize the Groq client with the API key from environment variables
client = Groq(api_key=os.getenv("GROQ_API_KEY"))


def get_code(query: str, image_path: str) -> str:
    """
    Sends a query and a screenshot to the Groq API to generate Python code.

    Args:
        query (str): The task description or query to send to the API.
        screen_shot (str): The file path of the screenshot to send.

    Returns:
        str: The Python code generated by the Groq API.
    """
    # Convert the screenshot to a Data URI format
    image_data_uri = encode_image_to_data_uri(image_path)

    # Send the query and screenshot to the Groq API
    completion = client.chat.completions.create(
        model="meta-llama/llama-4-scout-17b-16e-instruct",
        messages=[
            {
                "role": "system",
                "content": """
                            You are an agent that receives the current state of the environment and a task description as input. 
                            Your job is to break the task into step-by-step actions. 
                            For those actions, return a runnable Python script and nothing else. 
                            Output only Python source code (no surrounding text, no comments, no explanations, no backticks, no metadata). 
                            The code must be valid Python and executable as-is (include necessary imports, functions, and a runnable entry point if appropriate). 
                            Avoid unnecessary verbosity in the code; prefer clear, minimal, runnable implementations. 
                            If the request cannot be fulfilled safely or would violate policy, briefly return a single-line Python comment explaining the refusal (still no extra prose). 
                            You only use the PyAutoGUI library; always import pyautogui at the start of the program and for now you will give only fast keyboard actions."""
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": query
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": image_data_uri
                        }
                    }
                ]
            }
        ],
        temperature=1,
        max_completion_tokens=1024,
        top_p=1,
        stream=True,
        stop=None
    )

    # Collect the response from the API in chunks
    full_response = ""
    for chunk in completion:
        if chunk.choices[0].delta.content:
            full_response += chunk.choices[0].delta.content

    # Return the full response as a string
    return full_response



def run_code(query, image_path):
    # Generate Python code based on the query and screenshot
    code = get_code(query, image_path)
    print("Generated Code:\n", code)

    try:
        # Attempt to execute the generated code
        exec(code)
    except Exception as e:
        # Handle errors during execution of the generated code
        print(f"Error executing generated code: {e}")
        try:
            # Attempt to clean up the code by removing the first and last lines
            code = "\n".join(code.split("\n")[1:-1])
            exec(code)
        except Exception as inner_e:
            # Handle errors during re-execution of the cleaned code
            print(f"Error re-executing cleaned code: {inner_e}")
    finally:
        # Indicate that the execution attempt has completed
        print("Execution attempt completed.")